#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# xml - Manage bits and pieces of XML files
#
# Copyright 2014, Red Hat, Inc.
# Tim Bielawa <tbielawa@redhat.com>
# Magnus Hedemark <mhedemar@redhat.com>
# Pieter Voet <pietervoet@nl.ibm.com>
#
# This software may be freely redistributed under the terms of the GNU
# general public license version 2.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


DOCUMENTATION = '''
---
module: xml
short_description: Manage bits and pieces of XML files or strings
description:
  - A CRUD-like interface to managing bits of XML flies. You might also be interested in a brief tutorial, U(http://www.w3schools.com/xpath/). Note that module this does not handle complicated xpath expressions. So limit xpath selectors to simple expressions.
version_added: "1.0"
options:
  file:
    description:
      - Path to the file to operate on. File must exist ahead of time.
    required: true unless xmlstring is given
    default: null
    choices: []
  xmlstring:
    description:
      - A string containing XML on which to operate.
    required: true unless file is given
    default: null
    choices: []
  xpath:
    description:
      - A valid XPath expression describing the item(s) you want to manipulate. Operates on the document root, C(/), by default.
    required: false
    default: /
    choices: []
  rootelement:
    description:
      - The (optionally namespaced) rootelement name, which is required if the XML file doesn't exist and should be created
    required: true if ensure is create and file does not exist
    default: null
    choices: []
  namespaces:
    description:
      - The namespace prefix:uri mapping for the XPath expression. Needs to be a *map*, not a list of items.
    required: false
    default: null
    choices: []
  ensure:
    description:
      - Set or remove an xpath selection (node(s), attribute(s))
    required: false
    default: present
    choices:
      - "absent"
      - "present"
      - "create"
  value:
    description:
      - Desired state of the selected attribute. Either a string, or to unset a value, the Python C(None) keyword (YAML Equivalent, C(null)).
    required: false
    default: Elements default to no value (but present). Attributes default to an empty string.
    choices: []
  add_children:
    description:
      - 'Add additional child-element(s) to a selected element. Child elements must be given in a list and each item may be either a string (ex: C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.'
    required: false
    default: null
    choices: []
  set_children:
    description:
      - 'Set the the child-element(s) of a selected element. Removes any existing children. Child elements must be specified as in C(add_children).'
    required: false
    default: null
    choices: []
  count:
    description:
      - "Search for a given C(xpath) and provide the count of any matches"
    required: false
    default: null
    choices: []
  print_match:
    description:
      - "Search for a given C(xpath) and print out any matches"
    required: false
    default: null
    choices: []
  pretty_print:
    description:
      - "Pretty print output XML"
    required: false
    default: false
    choices: []
  content:
    description:
      - "Search for a given C(xpath) and get content"
    required: false
    default: false
    choices:
      - "attribute"
      - "text"
requirements:
    - The remote end must have the Python C(lxml) library installed
author: Tim Bielawa, Magnus Hedemark, Pieter Voet
'''


from io import BytesIO
from lxml import etree
try:
    import json
except:
    import simplejson as json
import lxml
import os
import re

def print_match(tree, xpath, namespaces, module):
    match = tree.xpath(xpath, namespaces=namespaces)
    match_xpaths = []
    for m in match:
        match_xpaths.append(tree.getpath(m))
    match_str = json.dumps(match_xpaths)
    msg = "selector '%s' match: %s" % (xpath, match_str)
    finish(tree, xpath, namespaces, module, changed=False, msg=msg)

def count(tree, xpath, namespaces, module):
    """ Return the count of nodes matching the xpath """
    hits = tree.xpath("count(/%s)" % xpath, namespaces=namespaces)
    finish(tree, xpath, namespaces, module, changed=False, msg=int(hits), hitcount=int(hits))

def is_node(tree, xpath, namespaces):
    """ Test if a given xpath matches anything and if that match is a node.

    For now we just assume you're only searching for one specific thing."""
    if xpath_matches(tree, xpath, namespaces):
        # OK, it found something
        match = tree.xpath(xpath, namespaces=namespaces)
        if type(match[0]) == lxml.etree._Element:
            return True

    return False

def is_attribute(tree, xpath, namespaces):
    """ Test if a given xpath matches and that match is an attribute
    An xpath attribute search will only match one item"""
    if xpath_matches(tree, xpath, namespaces):
        match = tree.xpath(xpath, namespaces=namespaces)
        if type(match[0]) == lxml.etree._ElementStringResult:
            return True
    return False

# PV
def right_pad_sequence(length, seq, pad_item=None):
    padnum = length - len(seq)
    return seq + padnum * [ pad_item ]

def str2element(element_str, attrib=None, namespaces=None):
    node, attribs = right_pad_sequence(2, re.findall('((?:[^\[\]\']|\'[^\']*\')+)', element_str))

    try:
        ns, name = node.split(':')
        e = etree.Element('{%s}%s' % (namespaces[ns], name), nsmap=namespaces)
    except:
        e = etree.Element(node)

    if attribs:
        for attr in re.findall('@([^ ]*)', attribs):
            key, value = attr.split('=')
            if ':' in key:
                ns, key = key.split(':')
                key = '{%s}%s' % (namespaces[ns], key)
            e.attrib[key] = value.strip('\'\"')
    # this code makes attributes defined with the 'attribute' parameter overrule the xpath attributes
    # can be mutual exclusive by using 'elif' or other means
    if attrib:
        for key in attrib.keys():
            e.attrib[key] = attrib[key]

    return e

def create_node(element, xpath, namespaces):
    nodes = re.findall('((?:[^/\'\"]|\'[^\']*\'|\"[^\"]*\")+)', xpath)
    # skip root element since it's created at document creation if file did not exist, otherwise root element is there
    if xpath[0] == '/':
        nodes = nodes[1:]

    node = nodes[0]
    try:
        e = element.xpath(node, namespaces=namespaces)[0]
    except:
        e = str2element(node, namespaces=namespaces)
        element.append(e)
    element = e

    if nodes[1:]:
        create_node(element, '/'.join(nodes[1:]), namespaces)

def xpath_matches(tree, xpath, namespaces):
    """ Test if a node exists """
    if tree.xpath(xpath, namespaces=namespaces):
        return True
    else:
        return False

def delete_xpath_target(tree, xpath, namespaces, module):
    """ Delete an attribute or element from a tree """
    try:
        for result in tree.xpath(xpath, namespaces=namespaces):
            if not module.check_mode:
                # Get the xpath for this result
                if is_attribute(tree, xpath, namespaces):
                    # Delete an attribute
                    parent = result.getparent()
                    # Pop this attribute match out of the parent
                    # node's 'attrib' dict by using this match's
                    # 'attrname' attribute for the key
                    parent.attrib.pop(result.attrname)
                elif is_node(tree, xpath, namespaces):
                    # Delete an element
                    result.getparent().remove(result)
    except Exception, e:
        abort("Couldn't delete xpath target: %s (%s)" % (xpath, str(e)), module)
    else:
        finish(tree, xpath, namespaces, module, changed=True)

def set_target_children(tree, xpath, namespaces, children, module):
    # PV
    if not is_node(tree, xpath, namespaces) and module.params['ensure'] == 'create':
        create_node(tree.getroot(), xpath, namespaces=namespaces)

    matches = tree.xpath(xpath, namespaces=namespaces)

    # Create a list of our new children
    children = children_to_nodes(children=children, module=module, namespaces=namespaces)
    children_as_string = [lxml.etree.tostring(c) for c in children]

    changed = False

    def replace_children_of(match):
        if not module.check_mode:
            for element in match.getchildren():
                match.remove(element)
            match.extend(children)

    # xpaths always return matches as a list, so....
    for match in matches:
        # Check if elements differ
        if len(match.getchildren()) == len(children):
            # PV
            #if lxml.etree.tostring(element) != children_as_string[idx]:
            for idx, element in enumerate(match.getchildren()):
                etree_array = lxml.etree.tostring(element).split()
                children_array = children_as_string[idx].split()
                etree_array.sort()
                children_array.sort()
                if etree_array != children_array:
                    replace_children_of(match)
                    changed = True
                    break
        else:
            replace_children_of(match)
            changed = True

    # Write it out
    finish(tree, xpath, namespaces, module, changed=changed)

def add_target_children(tree, xpath, namespaces, children, module):
    changed = False

    # PV
    if not is_node(tree, xpath, namespaces) and module.params['ensure'] == 'create':
        create_node(tree.getroot(), xpath, namespaces)

    if is_node(tree, xpath, namespaces):
        new_kids = children_to_nodes(children, module, namespaces=namespaces)
        for node in tree.xpath(xpath, namespaces=namespaces):
            if not module.check_mode: node.extend(new_kids)
        changed = True

    finish(tree, xpath, namespaces, module, changed=changed)

def set_target(tree, xpath, namespaces, attribute, value, module):
    changed = False

    if not is_node(tree, xpath, namespaces):
        # PV
        if module.params['ensure'] == 'create':
            create_node(tree.getroot(), xpath, namespaces)
            changed = True
        else:
            abort("Xpath " + xpath + " does not reference a node!", module)

    for element in tree.xpath(xpath, namespaces=namespaces):
        if not attribute:
            changed = changed or (element.text != value)
            if not module.check_mode and (element.text != value): element.text = value
        else:
            changed = changed or (element.get(attribute) != value)
            if ":" in attribute:
                attr_ns, attr_name = attribute.split(":")
                attribute = "{{{0}}}{1}".format(namespaces[attr_ns], attr_name)
            if not module.check_mode and (element.get(attribute) != value): element.set(attribute, value)

    finish(tree, xpath, namespaces, module, changed)

def get_element_text(tree, xpath, namespaces, module):
    if not is_node(tree, xpath, namespaces):
        abort("Xpath " + xpath + " does not reference a node!", module)

    elements = []
    for element in tree.xpath(xpath, namespaces=namespaces):
        elements.append({element.tag: element.text})

    finish(tree, xpath, namespaces, module, changed=False, msg=len(elements), hitcount=len(elements), matches=elements)

def get_element_attr(tree, xpath, namespaces, module):
    if not is_node(tree, xpath, namespaces):
        abort("Xpath " + xpath + " does not reference a node!", module)

    elements = []
    for element in tree.xpath(xpath, namespaces=namespaces):
        child = {}
        for key in element.keys():
            value = element.get(key)
            child.update({key: value})
        elements.append({element.tag: child})

    finish(tree, xpath, namespaces, module, changed=False, msg=len(elements), hitcount=len(elements), matches=elements)

# PV
def child_to_element(child, module, namespaces=None):
    ch_type = type(child)
    if ch_type == str or ch_type == unicode:
        return str2element(child, namespaces=namespaces)
    elif ch_type == dict:
        if len(child) > 1:
            abort("Can only create children from hashes with one key", module)

        (key, value) = child.items()[0]
        if type(value) == dict:
            node = str2element(key, attrib=value, namespaces=namespaces)
        else:
            node = str2element(key, namespaces=namespaces)
            node.text = value
        return node
    else:
        abort("Invalid child type: %s. Children must be either strings or hashes." % str(ch_type), module)

# PV
def children_to_nodes(children=[], module=None, namespaces=None):
    """turn a str/hash/list of str&hash into a list of elements"""
    return [child_to_element(child, module, namespaces) for child in children]

def abort(msg, m):
    m.fail_json(msg=msg)

def finish(tree, xpath, namespaces, m, changed=False, msg="", hitcount=0, matches=[]):
    if changed:
        xml_file = os.path.expanduser(m.params['file'])
        tree.write(xml_file, xml_declaration=True, encoding='UTF-8', pretty_print=m.params['pretty_print'])
    m.exit_json(changed=changed,actions={"xpath": xpath, "namespaces": namespaces, "ensure": m.params['ensure']}, msg=msg, count=hitcount, matches=matches)

def decode(value):
    # Convert value to unicode to use with lxml
    if not value or isinstance(value, unicode):
        return value
    elif isinstance(value, str):
        return value.decode('utf-8')
    elif isinstance(value, list):
        return [decode(v) for v in value]
    elif isinstance(value, dict):
        return dict((key, decode(val)) for key, val in value.iteritems())
    else:
        raise AttributeError('Undecodable value: type=%s, value=%s' %
                             (type(value), value))

def main():
    module = AnsibleModule(
        argument_spec=dict(
            file=dict(required=False, default=None),
            xmlstring=dict(required=False, default=None),
            rootelement=dict(required=False, default=None),
            xpath=dict(required=False, default='/'),
            namespaces=dict(required=False, default={}),
            # PV
            ensure=dict(required=False, default='present', choices=['absent', 'present', 'create']),
            value=dict(required=False, default=None),
            attribute=dict(required=False, default=None),
            add_children=dict(required=False, default=None),
            set_children=dict(required=False, default=None),
            count=dict(required=False, default=None, type='bool'),
            print_match=dict(required=False, default=None, type='bool'),
            pretty_print=dict(required=False, default=False, type='bool'),
            content=dict(required=False, default=None, choices=['attribute', 'text'])
        ),
        supports_check_mode=True,
        mutually_exclusive = [
            ['value','set_children'],
            ['value','add_children'],
            ['set_children', 'add_children'],
            ['file', 'xmlstring'],
            ['content','set_children'],
            ['content','add_children'],
            ['content','value'],
        ]
    )

    xml_file = os.path.expanduser(module.params['file'])
    xml_string = module.params['xmlstring']
    root_element = module.params['rootelement']
    xpath = module.params['xpath']
    namespaces = module.params['namespaces']
    ensure = module.params['ensure']
    value = decode(module.params['value'])
    attribute = module.params['attribute']
    set_children = decode(module.params['set_children'])
    add_children = decode(module.params['add_children'])
    pretty_print = module.params['pretty_print']
    content = module.params['content']

    ##################################################################
    # Check if the file exists
    # No: abort
    if xml_string:
        infile = BytesIO(xml_string.encode('utf-8'))
    elif os.path.isfile(xml_file):
        infile = file(xml_file, 'r')
    else:
        # PV
        if ensure != 'create':
            module.fail_json(msg="The target XML source does not exist: %s" % xml_file)

    # Try to parse in the target XML file
    try:
        parser = etree.XMLParser(remove_blank_text=pretty_print)
        x = etree.parse(infile, parser)
    except etree.XMLSyntaxError, e:
        module.fail_json(
            msg="Error while parsing file: %s" %
            str(e))
    # PV
    except UnboundLocalError, e:
        try:
            ns, name = root_element.split(':')
            e = etree.Element('{%s}%s' % (namespaces[ns], name), nsmap=namespaces)
        except:
            e = etree.Element(root_element)
        x = etree.ElementTree(e)

    if module.params['print_match']:
        print_match(x, xpath, namespaces, module)

    if module.params['count']:
        count(x, xpath, namespaces, module)

    if content == 'attribute':
        get_element_attr(x, xpath, namespaces, module)
    elif module.params['content'] == 'text':
        get_element_text(x, xpath, namespaces, module)

    # module.fail_json(msg="OK. Well, etree parsed the xml file...")

    # module.exit_json(what_did={"foo": "bar"}, changed=True)

    ############################################# #####################
    # File exists:
    # Ensure:
    if ensure == 'absent':
        # - absent: delete xpath target
        delete_xpath_target(x, xpath, namespaces, module)
        # Exit
    # - present: carry on

    ##################################################################
    # children && value both set?: should have already aborted by now
    ##################################################################

    ##################################################################
    # add_children && set_children both set?: should have already aborted by now
    ##################################################################

    ##################################################################
    # set_children set?
    # Yes: Set children of target
    if module.params['set_children']:
        set_target_children(x, xpath, namespaces, set_children, module)

    ##################################################################
    # add_children set?
    # Yes: Add children to target
    if module.params['add_children']:
        add_target_children(x, xpath, namespaces, add_children, module)

    # No?: Carry on

    ##################################################################
    # Is the xpath target an attribute selector?
    # Yes: Set the attribute, exit
    if module.params['value'] is not None:
        set_target(x, xpath, namespaces, attribute, value, module)

######################################################################
from ansible.module_utils.basic import *
main()
